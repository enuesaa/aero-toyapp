/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * My First API
 * OpenAPI spec version: 0.1
 */
import { useQuery } from '@tanstack/vue-query'
import type {
  DataTag,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'

import { unref } from 'vue'

import type { PictureResource } from './models'

export type getPictureResponse200 = {
  data: PictureResource
  status: 200
}

export type getPictureResponseComposite = getPictureResponse200

export type getPictureResponse = getPictureResponseComposite & {
  headers: Headers
}

export const getGetPictureUrl = () => {
  return `/picture`
}

export const getPicture = async (
  options?: RequestInit,
): Promise<getPictureResponse> => {
  const res = await fetch(getGetPictureUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getPictureResponse['data'] = body ? JSON.parse(body) : {}

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getPictureResponse
}

export const getGetPictureQueryKey = () => {
  return ['picture'] as const
}

export const getGetPictureQueryOptions = <
  TData = Awaited<ReturnType<typeof getPicture>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPicture>>, TError, TData>
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = getGetPictureQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPicture>>> = ({
    signal,
  }) => getPicture({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPicture>>,
    TError,
    TData
  >
}

export type GetPictureQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPicture>>
>
export type GetPictureQueryError = unknown

export function useGetPicture<
  TData = Awaited<ReturnType<typeof getPicture>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPicture>>, TError, TData>
    >
    fetch?: RequestInit
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetPictureQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >

  return query
}
